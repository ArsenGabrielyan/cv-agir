// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "./generated/client"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

model ResumeLink {
  id String @id @default(cuid())
  name String?
  url  String?

  resumeId String
  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model ResumeExperience {
  id String @id @default(cuid())
  job       String?
  company   String?
  startDate DateTime?
  endDate   DateTime?
  city      String?
  jobInfo   String?

  resumeId String
  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model ResumeEducation {
  id String @id @default(cuid())
  degree    String?
  faculty   String?
  startDate DateTime?
  endDate   DateTime?
  school    String?
  city      String?

  resumeId String
  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model ResumeCourses {
  id String @id @default(cuid())
  name        String?
  institution String?
  startDate   DateTime?
  endDate     DateTime?

  resumeId String
  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model ResumeReferences {
  id String @id @default(cuid())
  fullName String?
  position String?
  company  String?
  phone    String?
  email    String?

  resumeId String
  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model ResumeSkill {
  id String @id @default(cuid())
  name       String?
  percentage Int?

  resumeId String
  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model ResumeLanguage{
  id String @id @default(cuid())
  name       String?
  percentage Int?
  locale Locale?

  resumeId String
  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model CreditCard {
  id String @id @default(cuid())
  cardNumber String
  expiryDate DateTime
  cvv        String
  fullName   String
  city       String

  userId       String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CVPageSettings{
  id String @id @default(cuid())
  showEmail Boolean @default(true)
  showAddress Boolean @default(true)
  showPhone Boolean @default(true)
  showLinks Boolean @default(true)

  userId       String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserPlan {
  free
  premium
}

enum BorderStyles {
  square
  circle
  squircle
}

enum SubscriptionPeriod {
  yearly
  monthly
}

enum AuditAction {
  // Auth
  LOGIN_ERROR
  LOGIN_SUCCESS
  PASSWORD_CHANGE_REQUEST
  PASSWORD_CHANGE_ERROR
  PASSWORD_CHANGED
  VERIFICATION_REQUEST
  VERIFICATION_ERROR
  EMAIL_VERIFIED
  USER_REGISTERED
  REGISTRATION_ERROR
  TWO_FACTOR_VERIFIED
  LOGOUT
  OAUTH_SIGNIN
  FAILED_2FA_ATTEMPT

  // Content
  COVER_LETTER_DELETED
  COVER_LETTER_CREATED
  COVER_LETTER_UPDATED
  RESUME_DELETED
  RESUME_CREATED
  RESUME_UPDATED
  CV_PAGE_VIEWED

  // Subscription
  CREDIT_CARD_ADDED
  CREDIT_CARD_UPDATED
  CREDIT_CARD_DELETED
  PLAN_UPGRADED
  PLAN_CANCELLED
  PLAN_RENEWED

  // AI
  AI_ERROR
  AI_SUMMARY_GENERATED
  AI_EXPERIENCE_GENERATED
  AI_COVER_LETTER_GENERATED

  // Contact Form
  CONTACT_FORM_SUBMISSION_ERROR
  INVALID_CAPTCHA
  CONTACT_FORM_SUBMITTED

  // Settings
  ACCOUNT_UPDATED
  TWO_FACTOR_UPDATED
  EMAIL_CHANGE_REQUEST

  // Admin
  TEMPLATE_CREATED
  TEMPLATE_UPDATED
  TEMPLATE_DELETED
  CATEGORY_CREATED
  CATEGORY_UPDATED
  CATEGORY_DELETED

  // Forms
  VALIDATION_ERROR
  RATE_LIMIT_EXCEEDED
  ACTION_ERROR
  UNAUTHORIZED
  NO_ADMIN_ACCESS
}

enum Locale{
  hy
  en
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  accounts              Account[]
  sessions              Session[]
  resumes               Resume[]
  Authenticator Authenticator[]
  coverLetters          CoverLetter[]
  jobTitle              String?
  phone                 String?
  address               String?
  summary               String?
  hobbies               String?
  currentPlan           UserPlan               @default(free)
  cvPageSettings CVPageSettings?
  logs AuditLog[]
  isAdmin Boolean @default(false)

  subscriptionId String?       
  subscription   Subscription?

  creditCards CreditCard[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String  
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? 
  access_token      String? 
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? 
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String 

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}

model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}

model ResumeTemplateCategory {
  id        String           @id @default(cuid())
  name      String
  templates ResumeTemplate[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ResumeTemplate {
  id           String                 @id @default(cuid())
  locale Locale @default(hy)
  name         String?
  description  String?
  imageName    String?
  htmlTemplate String?
  cssStyle     String?
  categoryId   String                 
  isPremium    Boolean?
  category     ResumeTemplateCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  resumes      Resume[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Resume {
  id          String             @id @default(cuid())
  title       String
  description String?
  fname       String?
  lname       String?
  jobTitle    String?
  phone       String?
  address     String?
  profileImg  String?
  email       String?
  links       ResumeLink[]
  summary     String?
  experience  ResumeExperience[]
  education   ResumeEducation[]
  courses     ResumeCourses[]
  references  ResumeReferences[]
  skills      ResumeSkill[]
  languages   ResumeLanguage[]
  hobbies     String?

  colorHex    String?
  borderStyle BorderStyles?

  userId String? 
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  templateId String?         
  template   ResumeTemplate? @relation(fields: [templateId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CoverLetter {
  id          String  @id @default(cuid())
  title       String
  description String?

  fname      String?
  lname      String?
  jobTitle   String?
  phone      String?
  address    String?
  profileImg String?
  email      String?

  recipientName  String?
  recipientTitle String?
  companyName    String?
  companyAddress String?
  letterContent  String?

  colorHex    String?
  borderStyle BorderStyles?

  userId String? 
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id     String             @id @default(cuid())
  userId String             @unique 
  plan   UserPlan
  period SubscriptionPeriod
  price  Float

  startDate DateTime @default(now())
  endDate   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuditLog{
  id     String             @id @default(cuid())
  userId String?            
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  action AuditAction
  metadata Json?

  createdAt DateTime @default(now())
  @@index([userId])
  @@index([action])
}