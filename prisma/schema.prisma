// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "./generated/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type ResumeLink {
  name String?
  url  String?
}

type ResumeExperience {
  job       String?
  company   String?
  startDate DateTime?
  endDate   DateTime?
  city      String?
  jobInfo   String?
}

type ResumeEducation {
  degree    String?
  faculty   String?
  startDate DateTime?
  endDate   DateTime?
  school    String?
  city      String?
}

type ResumeCourses {
  name        String?
  institution String?
  startDate   DateTime?
  endDate     DateTime?
}

type ResumeReferences {
  fullName String?
  position String?
  company  String?
  phone    String?
  email    String?
}

type ResumeSkill {
  name       String?
  percentage Int?
}

type CreditCard {
  cardNumber String
  expiryDate DateTime
  cvv        String
  fullName   String
  city       String
}

enum UserPlan {
  free
  premium
}

enum BorderStyles {
  square
  circle
  squircle
}

enum SubscriptionPeriod {
  yearly
  monthly
}

type CVPageSettings{
  showEmail Boolean @default(true)
  showAddress Boolean @default(true)
  showPhone Boolean @default(true)
  showLinks Boolean @default(true)
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  accounts              Account[]
  sessions              Session[]
  resumes               Resume[]
  Authenticator Authenticator[]
  coverLetters          CoverLetter[]
  jobTitle              String?
  phone                 String?
  address               String?
  summary               String?
  hobbies               String?
  currentPlan           UserPlan               @default(free)
  cvPageSettings CVPageSettings?

  subscriptionId String?       @db.ObjectId
  subscription   Subscription?

  creditCards CreditCard[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}

model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}

model ResumeTemplateCategory {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  templates ResumeTemplate[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ResumeTemplate {
  id           String                 @id @default(auto()) @map("_id") @db.ObjectId
  name         String?
  description  String?
  imageName    String?
  htmlTemplate String?
  cssStyle     String?
  categoryId   String                 @db.ObjectId
  isPremium    Boolean?
  category     ResumeTemplateCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  resumes      Resume[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Resume {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  fname       String?
  lname       String?
  jobTitle    String?
  phone       String?
  address     String?
  profileImg  String?
  email       String?
  links       ResumeLink[]
  summary     String?
  experience  ResumeExperience[]
  education   ResumeEducation[]
  courses     ResumeCourses[]
  references  ResumeReferences[]
  skills      ResumeSkill[]
  languages   ResumeSkill[]
  hobbies     String?

  colorHex    String?
  borderStyle BorderStyles?

  userId String? @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  templateId String?         @db.ObjectId
  template   ResumeTemplate? @relation(fields: [templateId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CoverLetter {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?

  fname      String?
  lname      String?
  jobTitle   String?
  phone      String?
  address    String?
  profileImg String?
  email      String?

  recipientName  String?
  recipientTitle String?
  companyName    String?
  companyAddress String?
  letterContent  String?

  colorHex    String?
  borderStyle BorderStyles?

  userId String? @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id     String             @id @default(auto()) @map("_id") @db.ObjectId
  userId String             @unique @db.ObjectId
  plan   UserPlan
  period SubscriptionPeriod
  price  Float

  startDate DateTime @default(now())
  endDate   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}
